<?xml version="1.0" encoding="UTF-8"?>

<xs:schema targetNamespace="http://www.neuroml.org/schema/neuroml2"
    xmlns="http://www.neuroml.org/schema/neuroml2"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    elementFormDefault="qualified"
    attributeFormDefault="unqualified">

    <!-- An attempt to incorporate LEMS custom definitions...
    xmlns:lems="http://www.neuroml.org/lems/0.5"
    <xs:import namespace="http://www.neuroml.org/lems/0.5"
        schemaLocation=" http://neuroml.svn.sourceforge.net/viewvc/neuroml/NeuroML2/Schemas/LEMS/LEMS_v0.5.xsd"/>-->

    <!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!--      Core elements                                    -->
    <!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <xs:simpleType name="NmlId">
        <xs:annotation>
            <xs:documentation>An id attribute for elements which need to be identified uniquely (normally just within their parent element).</xs:documentation>
        </xs:annotation>

        <xs:restriction base="xs:string">
            <xs:pattern value="[a-zA-Z0-9_]*"/>
        </xs:restriction>

    </xs:simpleType>

    <xs:simpleType name="Nml2Quantity">
        <xs:annotation>
            <xs:documentation>A value for a physical quantity in NeuroML 2, e.g. 20, -60.0mV or 5nA</xs:documentation>
        </xs:annotation>

        <xs:restriction base="xs:string">
            <xs:pattern value="-?([0-9]*(\.[0-9]+)?)([eE]-?[0-9]+)?[\s]*([_a-zA-Z0-9])*"/>
        </xs:restriction>

    </xs:simpleType>

    <xs:simpleType name="Nml2Quantity_none">

        <xs:restriction base="xs:string">
            <xs:pattern value="-?([0-9]*(\.[0-9]+)?)([eE]-?[0-9]+)?"/> <!-- No units string -->
        </xs:restriction>

    </xs:simpleType>

    <xs:simpleType name="Nml2Quantity_voltage">

        <xs:restriction base="xs:string">
            <xs:pattern value="-?([0-9]*(\.[0-9]+)?)([eE]-?[0-9]+)?[\s]*(V|mV)"/> <!-- Based on set of defined Units in NeuroMLCoreDimensions.xml -->
        </xs:restriction>

    </xs:simpleType>

    <xs:simpleType name="Nml2Quantity_length">

        <xs:restriction base="xs:string">
            <xs:pattern value="-?([0-9]*(\.[0-9]+)?)([eE]-?[0-9]+)?[\s]*(m|cm|um)"/> <!-- Based on set of defined Units in NeuroMLCoreDimensions.xml -->
        </xs:restriction>

    </xs:simpleType>

    <xs:simpleType name="Nml2Quantity_conductance">

        <xs:restriction base="xs:string">
            <xs:pattern value="-?([0-9]*(\.[0-9]+)?)([eE]-?[0-9]+)?[\s]*(S|mS|uS|nS|pS)"/> <!-- Based on set of defined Units in NeuroMLCoreDimensions.xml -->
        </xs:restriction>

    </xs:simpleType>

    <xs:simpleType name="Nml2Quantity_conductanceDensity">

        <xs:restriction base="xs:string">
            <xs:pattern value="-?([0-9]*(\.[0-9]+)?)([eE]-?[0-9]+)?[\s]*(S_per_m2|mS_per_cm2|S_per_cm2)"/> <!-- Based on set of defined Units in NeuroMLCoreDimensions.xml -->
        </xs:restriction>

    </xs:simpleType>

    <xs:simpleType name="Nml2Quantity_time">

        <xs:restriction base="xs:string">
            <xs:pattern value="-?([0-9]*(\.[0-9]+)?)([eE]-?[0-9]+)?[\s]*(s|ms)"/> <!-- Based on set of defined Units in NeuroMLCoreDimensions.xml -->
        </xs:restriction>

    </xs:simpleType>

    <xs:simpleType name="Nml2Quantity_pertime">

        <xs:restriction base="xs:string">
            <xs:pattern value="-?([0-9]*(\.[0-9]+)?)([eE]-?[0-9]+)?[\s]*(per_s|per_ms)"/> <!-- Based on set of defined Units in NeuroMLCoreDimensions.xml -->
        </xs:restriction>

    </xs:simpleType>

    <xs:simpleType name="Nml2Quantity_capacitance">

        <xs:restriction base="xs:string">
            <xs:pattern value="-?([0-9]*(\.[0-9]+)?)([eE]-?[0-9]+)?[\s]*(F|uF|nF|pF)"/> <!-- Based on set of defined Units in NeuroMLCoreDimensions.xml -->
        </xs:restriction>

    </xs:simpleType>

    <xs:simpleType name="Nml2Quantity_specificCapacitance">

        <xs:restriction base="xs:string">
            <xs:pattern value="-?([0-9]*(\.[0-9]+)?)([eE]-?[0-9]+)?[\s]*(F_per_m2|uF_per_cm2)"/> <!-- Based on set of defined Units in NeuroMLCoreDimensions.xml -->
        </xs:restriction>

    </xs:simpleType>

    <xs:simpleType name="Nml2Quantity_concentration">

        <xs:restriction base="xs:string">
            <xs:pattern value="-?([0-9]*(\.[0-9]+)?)([eE]-?[0-9]+)?[\s]*(mol_per_m3|mol_per_cm3|M|mM)"/> <!-- Based on set of defined Units in NeuroMLCoreDimensions.xml -->
        </xs:restriction>

    </xs:simpleType>

    <xs:simpleType name="Nml2Quantity_current">

        <xs:restriction base="xs:string">
            <xs:pattern value="-?([0-9]*(\.[0-9]+)?)([eE]-?[0-9]+)?[\s]*(A|uA|nA|pA)"/> <!-- Based on set of defined Units in NeuroMLCoreDimensions.xml -->
        </xs:restriction>

    </xs:simpleType>

    <xs:simpleType name="Nml2Quantity_temperature">

        <xs:restriction base="xs:string">
            <xs:pattern value="-?([0-9]*(\.[0-9]+)?)([eE]-?[0-9]+)?[\s]*(degC)"/> <!-- Based on set of defined Units in NeuroMLCoreDimensions.xml -->
        </xs:restriction>

    </xs:simpleType>


    <xs:simpleType name="MetaId">
        <xs:annotation>
            <xs:documentation>An id string for pointing to an entry in an annotation element related to a MIRIAM resource. Based on metaid of SBML</xs:documentation>
        </xs:annotation>

        <xs:restriction base="xs:string">
            <xs:pattern value="[a-zA-Z0-9_]*"/>
        </xs:restriction>

    </xs:simpleType>


    <xs:simpleType name="NeuroLexId">
        <xs:annotation>
            <xs:documentation>An id string for pointing to an entry in the NeuroLex ontology. Use of this attribute is a shorthand for a full
            RDF based reference to the MIRIAM Resource urn:miriam:neurolex, with an bqbiol:is qualifier</xs:documentation>
        </xs:annotation>

        <xs:restriction base="xs:string">
            <xs:pattern value="[a-zA-Z0-9_]*"/>
        </xs:restriction>

    </xs:simpleType>


    <xs:simpleType name="SegmentId">
        <xs:annotation>
            <xs:documentation>An id attribute for segments: integer >=0 only!</xs:documentation>
        </xs:annotation>

        <xs:restriction base="xs:nonNegativeInteger">
        </xs:restriction>

    </xs:simpleType>

    <!--NOTE: Base and Standalone definitions moved to end of file, as some XML language binding
        generators, e.g. generateDS.py, require superclasses to be defined after the subclasses... -->


    <!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!--      Metadata elements                                -->
    <!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <xs:simpleType name="Notes">
        <xs:annotation>
            <xs:documentation>Textual human readable notes related to the element in question. It's useful to put these into
         the NeuroML files instead of XML comments, as the notes can be extracted and repeated in the files to which the NeuroML is mapped.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string"/>
    </xs:simpleType>


    <xs:complexType name="Annotation">
        <xs:annotation>
            <xs:documentation>Placeholder for MIRIAM related metadata, among others.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:any processContents="skip" minOccurs="0" maxOccurs="unbounded"/> <!-- Further elements will be specified!! -->
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="ComponentType">
        <xs:annotation>
            <xs:documentation>Contains an extension to NeuroML by creating custom LEMS ComponentType.</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:any processContents="skip" minOccurs="0" maxOccurs="unbounded"/> <!-- Further elements will be specified!! -->
        </xs:sequence>

        <xs:attribute name="name" type="xs:string" use="required"/>
        <xs:attribute name="extends" type="xs:string" use="optional"/>
        <xs:attribute name="description" type="xs:string" use="optional"/>

    </xs:complexType>


    <xs:simpleType name="ZeroToOne">
        <xs:annotation>
                <xs:documentation>Double restricted to between 1 and 0</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:double">
            <xs:minInclusive value="0"/>
            <xs:maxInclusive value="1"/>
        </xs:restriction>
    </xs:simpleType>



    <!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!--      Main NeuroML element                             -->
    <!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <xs:element name="neuroml" type="neuroml">
        <xs:annotation>
            <xs:documentation>The root NeuroML element.</xs:documentation>
        </xs:annotation>
    </xs:element>

    <xs:complexType name="neuroml"> <!-- Making the complexType definition of the root element lowercase, not to confuse language binding generators... -->

        <xs:complexContent>

            <xs:extension base="Standalone">

            <xs:sequence>
                
                <xs:element name="include" type="includeType" minOccurs="0" maxOccurs="unbounded"/>

                <xs:element name="extracellularProperties" type="ExtracellularProperties" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="intracellularProperties" type="IntracellularProperties" minOccurs="0" maxOccurs="unbounded"/>

                <xs:element name="morphology" type="Morphology" minOccurs="0" maxOccurs="unbounded"/>

                <xs:element name="ionChannel" type="IonChannel" minOccurs="0" maxOccurs="unbounded"/>

                <xs:group ref="concentrationModelTypes"/>

                <xs:group ref="synapseTypes"/>

                <xs:element name="biophysicalProperties" type="BiophysicalProperties" minOccurs="0" maxOccurs="unbounded"/>

                <xs:group ref="cellTypes"/>

                <xs:element name="pulseGenerator" type="PulseGenerator" minOccurs="0" maxOccurs="unbounded"/>

                <xs:element name="network" type="Network" minOccurs="0" maxOccurs="unbounded"/>

                <xs:element name="ComponentType" type="ComponentType" minOccurs="0" maxOccurs="unbounded"/>

            </xs:sequence>

            </xs:extension>

        </xs:complexContent>

    </xs:complexType>

    <!-- A small subset of XLInclude from: http://www.w3.org/2001/XInclude.xsd  
         Will be sufficient for now... -->
    <xs:complexType name="includeType" mixed="true">
        <xs:attribute name="href" use="optional" type="xs:anyURI"/>
    </xs:complexType>

    <xs:group name="cellTypes">
        <xs:annotation>
        <xs:documentation>Various types of cells which are defined in NeuroML 2. This list will be expanded...</xs:documentation>
        </xs:annotation>
        <xs:sequence>
                <xs:element name="cell" type="Cell" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="abstractCell" type="AbstractCell" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="iafTauCell" type="IaFTauCell" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="iafCell" type="IaFCell" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="izhikevichCell" type="IzhikevichCell" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="adExIaFCell" type="AdExIaFCell" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
   </xs:group>



    <xs:group name="synapseTypes">
        <xs:annotation>
        <xs:documentation>Various types of synapse which are defined in NeuroML 2. This list will be expanded...</xs:documentation>
        </xs:annotation>
        <xs:sequence>
                <xs:element name="expOneSynapse" type="ExpOneSynapse" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="expTwoSynapse" type="ExpTwoSynapse" minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="nmdaSynapse"   type="NmdaSynapse"   minOccurs="0" maxOccurs="unbounded"/>
                <xs:element name="stpSynapse"    type="StpSynapse"    minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
   </xs:group>


    <xs:group name="concentrationModelTypes">
        <xs:annotation>
        <xs:documentation>Various types of concentration model which are defined in NeuroML 2. This list will be expanded...</xs:documentation>
        </xs:annotation>
        <xs:sequence>
                <xs:element name="decayingPoolConcentrationModel" type="DecayingPoolConcentrationModel" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
   </xs:group>

    <!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!--      IonChannel element                                  -->
    <!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <xs:complexType name="IonChannel">

        <xs:complexContent>
            <xs:extension base="Standalone">
                <xs:choice>
                    <xs:element name="gate" type="GateHH" minOccurs="0" maxOccurs="unbounded"/>    <!-- TODO check type="gateHH" for this -->
                    <xs:element name="gateHH" type="GateHH" minOccurs="0" maxOccurs="unbounded"/>
                </xs:choice>

                <xs:attribute name="species" type="NmlId" use="optional"/>

                <xs:attribute name="type" type="channelTypes" use="optional"/>

                <xs:attribute name="conductance" type="Nml2Quantity_conductance" use="optional"/>

            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:simpleType name="channelTypes">
      <xs:restriction base="xs:string">
        <xs:enumeration value="ionChannelPassive"/>
        <xs:enumeration value="ionChannelHH"/>
        <xs:enumeration value="ionChannelKS"/>
      </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="gateTypes">
      <xs:restriction base="xs:string">
        <xs:enumeration value="gateHH"/>
        <xs:enumeration value="gateKS"/>
      </xs:restriction>
    </xs:simpleType>



    <xs:complexType name="GateHH">
        <xs:complexContent>
            <xs:extension base="Base">
                <xs:all>
                    <xs:element name="notes" type="Notes" minOccurs="0"/>
                    <xs:element name="q10Settings" type="Q10Settings" minOccurs="0"/>
                    <xs:element name="forwardRate" type="HHRate" minOccurs="0"/>
                    <xs:element name="reverseRate" type="HHRate" minOccurs="0"/>
                    <xs:element name="timeCourse" type="HHTime"  minOccurs="0"/>
                    <xs:element name="steadyState" type="HHVariable" minOccurs="0"/>
                </xs:all>
                <xs:attribute name="instances" type="xs:integer" use="optional" default="1"/>
                <xs:attribute name="type" type="gateTypes" use="optional"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>


    <xs:complexType name="Q10Settings">
            <xs:attribute name="type" type="NmlId" use="required"/>
            <xs:attribute name="fixedQ10" type="Nml2Quantity_none" use="optional"/>   <!-- TODO: make this and follwing 2 attrs either/or-->
            <xs:attribute name="q10Factor" type="Nml2Quantity_none" use="optional"/>
            <xs:attribute name="experimentalTemp" type="Nml2Quantity_temperature" use="optional"/>
    </xs:complexType>

    <xs:complexType name="HHRate">
            <xs:attribute name="type" type="NmlId" use="required"/>
            <xs:attribute name="rate" type="Nml2Quantity_pertime" use="optional"/>
            <xs:attribute name="midpoint" type="Nml2Quantity_voltage" use="optional"/>
            <xs:attribute name="scale" type="Nml2Quantity_voltage" use="optional"/>
    </xs:complexType>

    <xs:complexType name="HHVariable">
            <xs:attribute name="type" type="NmlId" use="required"/>
            <xs:attribute name="rate" type="xs:float" use="optional"/>
            <xs:attribute name="midpoint" type="Nml2Quantity_voltage" use="optional"/>
            <xs:attribute name="scale" type="Nml2Quantity_voltage" use="optional"/>
    </xs:complexType>

    <xs:complexType name="HHTime">
            <xs:attribute name="type" type="NmlId" use="required"/>
            <xs:attribute name="rate" type="Nml2Quantity_time" use="optional"/>
            <xs:attribute name="midpoint" type="Nml2Quantity_voltage" use="optional"/>
            <xs:attribute name="scale" type="Nml2Quantity_voltage" use="optional"/>
            <xs:attribute name="tau" type="Nml2Quantity_time" use="optional"/>    <!-- TODO: make this and prev 3 attrs either/or-->
    </xs:complexType>

    <!--<xs:complexType name="FixedTimeCourse">
            <xs:attribute name="tau" type="Nml2Quantity_time" use="required"/>
    </xs:complexType>-->



    <!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!--      Concentration Model types                        -->
    <!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <xs:complexType name="DecayingPoolConcentrationModel">

        <xs:complexContent>
            <xs:extension base="Standalone">

                <xs:attribute name="ion" type="NmlId" use="required">
                    <xs:annotation>
                        <xs:documentation>Should not be required, as it's present on the species element!</xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="restingConc" type="Nml2Quantity_concentration" use="required"/>
                <xs:attribute name="decayConstant" type="Nml2Quantity_time" use="required"/>
                <xs:attribute name="shellThickness" type="Nml2Quantity_length" use="required"/>

            </xs:extension>
        </xs:complexContent>
    </xs:complexType>


    <!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!--      Synapse types                                    -->
    <!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <xs:complexType name="ConductanceBasedSynapse">

        <xs:complexContent>
            <xs:extension base="Standalone">

                <xs:attribute name="gbase" type="Nml2Quantity_conductance" use="required"/>
                <xs:attribute name="erev" type="Nml2Quantity_voltage" use="required"/>

            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    
    <xs:complexType name="ExpOneSynapse">

        <xs:complexContent>
            <xs:extension base="ConductanceBasedSynapse">

                <xs:attribute name="tauDecay" type="Nml2Quantity_time" use="required"/>

            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    
    <xs:complexType name="ExpTwoSynapse">

        <xs:complexContent>
            <xs:extension base="ConductanceBasedSynapse">

                <xs:attribute name="tauDecay" type="Nml2Quantity_time" use="required"/>
                <xs:attribute name="tauRise" type="Nml2Quantity_time" use="required"/>

            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    
    <xs:complexType name="NmdaSynapse">

        <xs:complexContent>
            <xs:extension base="ExpTwoSynapse">
                <xs:sequence>
                    <xs:element name="voltageConcDepBlock" type="VoltageConcDepBlock"/>
                </xs:sequence>

            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
    <xs:complexType name="StpSynapse">

        <xs:complexContent>
            <xs:extension base="ExpTwoSynapse">
                <xs:sequence>
                    <xs:element name="stpMechanism" type="StpMechanism"/>
                </xs:sequence>

            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    
   

    <xs:complexType name="VoltageConcDepBlock">
        <xs:attribute name="type" type="xs:string" fixed="voltageConcDepBlock"/>
        <xs:attribute name="species" type="NmlId" use="required"/>
        <xs:attribute name="blockConcentration" type="Nml2Quantity_concentration" use="required"/>
        <xs:attribute name="scalingConc" type="Nml2Quantity_concentration" use="required"/>
        <xs:attribute name="scalingVolt" type="Nml2Quantity_voltage" use="required"/>
    </xs:complexType>
    
    <xs:complexType name="StpMechanism">
        <xs:attribute name="initReleaseProb" type="ZeroToOne" use="required"/>
        <xs:attribute name="tauFac" type="Nml2Quantity_time" use="required"/>
        <xs:attribute name="tauRec" type="Nml2Quantity_time" use="required"/>
    </xs:complexType>



    <!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!--      Cell element                                     -->
    <!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <xs:complexType name="AbstractCell">

        <xs:complexContent>
            <xs:extension base="Standalone">

            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="IaFTauCell">
        <xs:complexContent>
            <xs:extension base="AbstractCell">
                <xs:attribute name="leakReversal" type="Nml2Quantity_voltage" use="required"/>
                <xs:attribute name="thresh" type="Nml2Quantity_voltage" use="required"/>
                <xs:attribute name="reset" type="Nml2Quantity_voltage" use="required"/>
                <xs:attribute name="tau" type="Nml2Quantity_time" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="IaFCell">
        <xs:complexContent>
            <xs:extension base="AbstractCell">
                <xs:attribute name="leakReversal" type="Nml2Quantity_voltage" use="required"/>
                <xs:attribute name="thresh" type="Nml2Quantity_voltage" use="required"/>
                <xs:attribute name="reset" type="Nml2Quantity_voltage" use="required"/>
                <xs:attribute name="C" type="Nml2Quantity_capacitance" use="required"/>
                <xs:attribute name="leakConductance" type="Nml2Quantity_conductance" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="IzhikevichCell">
        <xs:complexContent>
            <xs:extension base="AbstractCell">
                <xs:attribute name="v0" type="Nml2Quantity_voltage" use="required"/>
                <xs:attribute name="thresh" type="Nml2Quantity_voltage" use="required"/>
                <xs:attribute name="a" type="Nml2Quantity_none" use="required"/>
                <xs:attribute name="b" type="Nml2Quantity_none" use="required"/>
                <xs:attribute name="c" type="Nml2Quantity_none" use="required"/>
                <xs:attribute name="d" type="Nml2Quantity_none" use="required"/>
                <xs:attribute name="Iamp" type="Nml2Quantity_none" use="required"/>
                <xs:attribute name="Idel" type="Nml2Quantity_time" use="required"/>
                <xs:attribute name="Idur" type="Nml2Quantity_time" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="AdExIaFCell">
        <xs:complexContent>
            <xs:extension base="AbstractCell">
                <xs:attribute name="C" type="Nml2Quantity_capacitance" use="required"/>
                <xs:attribute name="gL" type="Nml2Quantity_conductance" use="required"/>
                <xs:attribute name="EL" type="Nml2Quantity_voltage" use="required"/>
                <xs:attribute name="reset" type="Nml2Quantity_voltage" use="required"/>
                <xs:attribute name="VT" type="Nml2Quantity_voltage" use="required"/>
                <xs:attribute name="thresh" type="Nml2Quantity_voltage" use="required"/>
                <xs:attribute name="delT" type="Nml2Quantity_voltage" use="required"/>
                <xs:attribute name="tauw" type="Nml2Quantity_time" use="required"/>
                <xs:attribute name="a" type="Nml2Quantity_conductance" use="required"/>
                <xs:attribute name="b" type="Nml2Quantity_current" use="required"/>
                <xs:attribute name="Iamp" type="Nml2Quantity_current" use="required"/>
                <xs:attribute name="Idel" type="Nml2Quantity_time" use="required"/>
                <xs:attribute name="Idur" type="Nml2Quantity_time" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>


    <xs:complexType name="Cell">

        <xs:complexContent>
            <xs:extension base="AbstractCell">

                <xs:sequence>
                    <xs:element name="morphology" type="Morphology" minOccurs="0"/>
                    <xs:element name="biophysicalProperties" type="BiophysicalProperties" minOccurs="0"/>
                </xs:sequence>


                <xs:attribute name="morphology" type="NmlId" use="optional" default="1">
                    <xs:annotation>
                        <xs:documentation>Should only be used if morphology element is outside the cell.
                                          This points to the id of the morphology</xs:documentation>
                    </xs:annotation>
                </xs:attribute>

                <xs:attribute name="biophysicalProperties" type="NmlId" use="optional" default="1">
                    <xs:annotation>
                        <xs:documentation>Should only be used if biophysicalProperties element is outside the cell.
                                          This points to the id of the biophysicalProperties</xs:documentation>
                    </xs:annotation>
                </xs:attribute>


            </xs:extension>
        </xs:complexContent>
    </xs:complexType>


    <xs:complexType name="Morphology">
        <xs:annotation>
            <xs:documentation>Standalone element which is usually inside a single cell, but could be outside and
                              referenced by id.</xs:documentation>
        </xs:annotation>

        <xs:complexContent>

            <xs:extension base="Standalone">

                <xs:sequence>
                    <xs:element name="segment" type="Segment" maxOccurs="unbounded"/>
                    <xs:element name="segmentGroup" type="SegmentGroup" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>

            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="Segment">
        <xs:complexContent>
            <xs:extension base="Base">

                <xs:sequence>
                    <xs:element name="parent" type="SegmentParent" minOccurs="0"/>
                    <xs:element name="proximal" type="Point3DWithDiam" minOccurs="0"/>
                    <xs:element name="distal" type="Point3DWithDiam" minOccurs="1"/>
                </xs:sequence>

                <!-- TODO: Do we want to do away with numerical ids and just use unique strings/names in id attribute?? -->
                <!--<xs:attribute name="id" type="SegmentId" use="required"/>-->
                <xs:attribute name="name" type="xs:string" use="required"/>

            </xs:extension>
        </xs:complexContent>

    </xs:complexType>

    <xs:complexType name="SegmentParent">
        <xs:attribute name="segment" type="SegmentId" use="required"/>
        <xs:attribute name="fractionAlong" type="ZeroToOne" use="optional" default="1"/>
    </xs:complexType>


    <xs:complexType name="Point3DWithDiam">
        <xs:annotation>
            <xs:documentation>A 3D point with diameter.</xs:documentation>
        </xs:annotation>
        <xs:attribute name="x" type="xs:double" use="required"/>
        <xs:attribute name="y" type="xs:double" use="required"/>
        <xs:attribute name="z" type="xs:double" use="required"/>
        <xs:attribute name="diameter" type="xs:double" use="required"/>
    </xs:complexType>


    <xs:complexType name="SegmentGroup">


        <!--.... dendrite_group  ...-->
        <xs:complexContent>
            <xs:extension base="Base">

                <xs:sequence>
                    <xs:element name="member" type="Member" minOccurs="0" maxOccurs="unbounded"/>
                    <xs:element name="include" type="Include" minOccurs="0" maxOccurs="unbounded"/>
                    <xs:element name="path" type="Path" minOccurs="0" maxOccurs="unbounded"/>
                    <xs:element name="subTree" type="SubTree" minOccurs="0" maxOccurs="unbounded"/>
                    <xs:element name="inhomogeneousParam" type="InhomogeneousParam" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>

            </xs:extension>
        </xs:complexContent>
    </xs:complexType>


    <xs:complexType name="InhomogeneousParam">
        <xs:complexContent>
            <xs:extension base="Base">
                <xs:sequence>
                    <xs:element name="proximal" type="ProximalDetails" minOccurs="0"/>
                    <xs:element name="distal" type="DistalDetails" minOccurs="0"/>
                </xs:sequence>
                <xs:attribute name="variable" type="xs:string" use="required"/>
                <xs:attribute name="metric" type="Metric" use="required"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>


    <xs:simpleType name="Metric">
        <xs:annotation>
                <xs:documentation>Allowed metrics for InhomogeneousParam</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
                <xs:enumeration value="Path Length from root"/>
        </xs:restriction>
    </xs:simpleType>


    <xs:complexType name="ProximalDetails">
        <xs:attribute name="translationStart" type="xs:double" use="required"/>
    </xs:complexType>

    <xs:complexType name="DistalDetails">
        <xs:attribute name="normalizationEnd" type="xs:double" use="required"/>
    </xs:complexType>

    <xs:complexType name="Member">
        <xs:attribute name="segment" type="SegmentId" use="required"/>
    </xs:complexType>
    
    <xs:complexType name="Include">
        <xs:attribute name="segmentGroup" type="NmlId" use="required"/>
    </xs:complexType>
    
    <xs:complexType name="Path">
        <xs:sequence>
            <xs:element name="from" type="SegmentEndPoint" minOccurs="0"/>
            <xs:element name="to" type="SegmentEndPoint" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>
    
    <xs:complexType name="SubTree">
        <xs:choice>
            <xs:element name="from" type="SegmentEndPoint" minOccurs="0"/>
            <xs:element name="to" type="SegmentEndPoint" minOccurs="0"/>
        </xs:choice>
    </xs:complexType>
    
    <xs:complexType name="SegmentEndPoint">
        <xs:attribute name="segment" type="SegmentId" use="required"/>
    </xs:complexType>


    <!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!--      Biophysical properties                           -->
    <!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++-->


    <xs:complexType name="BiophysicalProperties">
        <xs:annotation>
            <xs:documentation>Standalone element which is usually inside a single cell, but could be outside and
                              referenced by id.</xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="Standalone">

                <xs:sequence>
                    <xs:element name="membraneProperties" type="MembraneProperties"/>
                    <xs:element name="intracellularProperties" type="IntracellularProperties" minOccurs="0"/>
                    <xs:element name="extracellularProperties" type="ExtracellularProperties" minOccurs="0"/>
                </xs:sequence>


            </xs:extension>
        </xs:complexContent>
    </xs:complexType>


    <xs:complexType name="MembraneProperties">

        <xs:sequence>
            <xs:element name="channelPopulation" type="ChannelPopulation" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="channelDensity" type="ChannelDensity" minOccurs="0" maxOccurs="unbounded"/>

            <xs:element name="spikeThresh" type="ValueAcrossSegOrSegGroup" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="specificCapacitance" type="ValueAcrossSegOrSegGroup" minOccurs="0" maxOccurs="unbounded"/>

            <xs:element name="initMembPotential" type="ValueAcrossSegOrSegGroup" minOccurs="0" maxOccurs="unbounded"/>
            
            <xs:element name="reversalPotential" type="ReversalPotential" minOccurs="0" maxOccurs="unbounded"/>
            
        </xs:sequence>

    </xs:complexType>

    <xs:complexType name="ChannelPopulation">

        <xs:complexContent>
            <xs:extension base="Base">

                <xs:sequence>
                        <xs:element name="variableParameter" type="VariableParameter" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>

                <xs:attribute name="ionChannel" type="NmlId" use="required"/>
                <xs:attribute name="number" type="xs:nonNegativeInteger" use="required"/>

                <xs:attribute name="erev" type="Nml2Quantity_voltage" use="optional"/>

                <!-- Note: only one of the following should be used!! -->
                <xs:attribute name="segmentGroup" type="NmlId" use="optional" default="all"/>
                <xs:attribute name="segment" type="NmlId" use="optional"/>

                <xs:attribute name="ion" type="NmlId" use="optional">
                    <xs:annotation>
                        <xs:documentation>Specifying the ion here again is redundant, this will be set in ionChannel. It is added here
                        TEMPORARILY as selecting all ca or na conducting channel populations/densities in a cell would be difficult otherwise.
                        It should be removed in the longer term, due to possible inconsistencies in this value and that in the ionChannel
                        element. TODO: remove.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>

            </xs:extension>
        </xs:complexContent>

    </xs:complexType>

    <xs:complexType name="ChannelDensity">

        <xs:complexContent>
            <xs:extension base="Base">
                    
                <xs:sequence>
                        <xs:element name="variableParameter" type="VariableParameter" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>

                <xs:attribute name="ionChannel" type="NmlId" use="required"/>
                <xs:attribute name="condDensity" type="Nml2Quantity_conductanceDensity" use="optional"/>

                <xs:attribute name="erev" type="Nml2Quantity_voltage" use="optional"/>
                
                <!-- Note: only one of the following should be used!! -->
                <xs:attribute name="segmentGroup" type="NmlId" use="optional" default="all"/>

                <xs:attribute name="segment" type="NmlId" use="optional"/>

                <xs:attribute name="ion" type="NmlId" use="optional">
                    <xs:annotation>
                        <xs:documentation>Specifying the ion here again is redundant, this will be set in ionChannel. It is added here
                        TEMPORARILY as selecting all ca or na conducting channel populations/densities in a cell would be difficult otherwise.
                        It should be removed in the longer term, due to possible inconsistencies in this value and that in the ionChannel 
                        element. TODO: remove.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>

            </xs:extension>
        </xs:complexContent>
        
    </xs:complexType>

    <xs:complexType name="ValueAcrossSegOrSegGroup">

        <xs:attribute name="value" type="Nml2Quantity" use="optional"/>

        <!-- Note: only one of the following should be used!! -->
        <xs:attribute name="segmentGroup" type="NmlId" use="optional" default="all"/>
        <xs:attribute name="segment" type="NmlId" use="optional"/>

    </xs:complexType>


    <xs:complexType name="VariableParameter">

        <xs:sequence>
            <xs:element name="inhomogeneousValue" type="InhomogeneousValue" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="parameter" type="xs:string" use="required"/>
        <xs:attribute name="segmentGroup" type="xs:string" use="required"/>

    </xs:complexType>

    <xs:complexType name="InhomogeneousValue">
        <xs:attribute name="inhomogeneousParam" type="xs:string" use="required"/>
        <xs:attribute name="value" type="xs:string" use="required"/>
    </xs:complexType>


    <xs:complexType name="ReversalPotential">

        <xs:complexContent>
            <xs:extension base="ValueAcrossSegOrSegGroup">
                <xs:attribute name="species" type="NmlId" use="optional"/>
            </xs:extension>
        </xs:complexContent>

    </xs:complexType>


    <xs:complexType name="Species">

        <xs:complexContent>
            <xs:extension base="ValueAcrossSegOrSegGroup">

                <xs:attribute name="id" type="NmlId" use="required"/>

                <xs:attribute name="concentrationModel" type="NmlId" use="required"/>

                <xs:attribute name="ion" type="NmlId" use="optional">
                    <xs:annotation>
                        <xs:documentation>Specifying the ion here again is redundant, the ion name should be the same as id. Kept for now
                        until LEMS implementation can select by id. TODO: remove.</xs:documentation>
                    </xs:annotation>
                </xs:attribute>

                <xs:attribute name="initialConcentration" type="Nml2Quantity_concentration" use="required"/>
                <xs:attribute name="initialExtConcentration" type="Nml2Quantity_concentration" use="required"/>
                
            </xs:extension>
        </xs:complexContent>

    </xs:complexType>


    <!--
    <xs:complexType name="FixedConcentration">
        <xs:attribute name="concentration" type="Nml2Quantity_concentration" use="required"/>
    </xs:complexType>

    -->

 <!-- TODO: remove -->
    <xs:complexType name="ConcentrationModel_D">

        <xs:complexContent>
            <xs:extension base="DecayingPoolConcentrationModel">

                <xs:attribute name="type" use="required" fixed="decayingPoolConcentrationModel"/>

            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="IntracellularProperties">

        <xs:sequence>
            <xs:element name="species" type="Species" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="resistivity" type="ValueAcrossSegOrSegGroup" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>

    </xs:complexType>

    <xs:complexType name="ExtracellularProperties">

        <xs:complexContent>
            <xs:extension base="Base"> <!-- Should be standalone, but need some real elements below or XSD not valid... -->
                <xs:sequence>
                    <xs:element name="species" type="Species" minOccurs="0" maxOccurs="unbounded"/> <!-- Further elements will be specified!! -->
                </xs:sequence>

                <xs:attribute name="temperature" type="Nml2Quantity_temperature" use="optional"/>

            </xs:extension>
        </xs:complexContent>


    </xs:complexType>

    <xs:complexType name="ExtracellularPropertiesLocal">

        <xs:sequence>
            <xs:element name="species" type="Species" minOccurs="0" maxOccurs="unbounded"/> <!-- Further elements will be specified!! -->
        </xs:sequence>

        <xs:attribute name="temperature" type="Nml2Quantity_temperature" use="optional"/>

    </xs:complexType>

    <xs:complexType name="ReactionScheme">

        <xs:complexContent>
            <xs:extension base="Base"> <!-- Should be standalone, but need some real elements below or XSD not valid... -->
                <xs:sequence>
                    <xs:any processContents="skip" minOccurs="0" maxOccurs="unbounded"/> <!-- Further elements will be specified!! -->
                </xs:sequence>
                <xs:attribute name="source" type="xs:string" use="required"/>
                <xs:attribute name="type" type="xs:string" use="required"/>
            </xs:extension>
        </xs:complexContent>

    </xs:complexType>



    <!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!--      Inputs                                         -->
    <!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++-->


<!--Will be updated in line with LEMS ComponentType definitions -->

    <xs:complexType name="PulseGenerator">

        <xs:complexContent>
            <xs:extension base="Standalone">

                <xs:attribute name="delay" type="Nml2Quantity_time" use="required"/>
                <xs:attribute name="duration" type="Nml2Quantity_time" use="required"/>
                <xs:attribute name="amplitude" type="Nml2Quantity_current" use="required"/>

            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!--      Networks                                         -->
    <!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++-->


    <xs:complexType name="Network">

        <xs:complexContent>
            <xs:extension base="Standalone">
                <xs:sequence>
                    <xs:element name="space" type="Space" minOccurs="0" maxOccurs="unbounded"/>
                    <xs:element name="region" type="Region" minOccurs="0" maxOccurs="unbounded"/>
                    <xs:element name="extracellularProperties" type="ExtracellularPropertiesLocal" minOccurs="0" maxOccurs="unbounded"/>
                    <xs:element name="population" type="Population" maxOccurs="unbounded"/>
                    <xs:element name="cellSet" type="CellSet" minOccurs="0" maxOccurs="unbounded"/>
                    <xs:element name="projection" type="Projection" minOccurs="0" maxOccurs="unbounded"/>
                    <xs:element name="synapticConnection" type="SynapticConnection" minOccurs="0" maxOccurs="unbounded"/> <!--Will be updated in line with LEMS ComponentType definitions -->
                    <xs:element name="connection" type="Connection" minOccurs="0" maxOccurs="unbounded"/> <!--Will be updated in line with LEMS ComponentType definitions -->
                    <xs:element name="explicitInput" type="ExplicitInput" minOccurs="0" maxOccurs="unbounded"/> <!--Will be updated in line with LEMS ComponentType definitions -->
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>

    </xs:complexType>


    <xs:complexType name="Space"> <!-- Something onto which cells & networks can be laid out, e.g. n dim grid or n dim Euclidean space -->

        <xs:complexContent>
            <xs:extension base="Base">
                <xs:sequence>
                    <xs:element name="structure" type="SpaceStructure" minOccurs="0"/>
                </xs:sequence>
                <xs:attribute name="basedOn" type="allowedSpaces" use="optional"/>
            </xs:extension>
        </xs:complexContent>

    </xs:complexType>

    <xs:complexType name="SpaceStructure">
                <xs:attribute name="xSpacing" type="xs:float"/>
                <xs:attribute name="ySpacing" type="xs:float" use="optional"/> <!-- only use if >= 2D grid-->
                <xs:attribute name="zSpacing" type="xs:float" use="optional"/> <!-- only use if 3D grid-->
                <xs:attribute name="xStart" type="xs:float" use="optional" default="0"/>
                <xs:attribute name="yStart" type="xs:float" use="optional" default="0"/> <!-- only use if >= 2D grid-->
                <xs:attribute name="zStart" type="xs:float" use="optional" default="0"/> <!-- only use if 3D grid-->
    </xs:complexType>


    <xs:simpleType name="allowedSpaces">
      <xs:restriction base="xs:string">
        <xs:enumeration value="Euclidean_1D"/>
        <xs:enumeration value="Euclidean_2D"/>
        <xs:enumeration value="Euclidean_3D"/>
        <xs:enumeration value="Grid_1D"/>
        <xs:enumeration value="Grid_2D"/>
        <xs:enumeration value="Grid_3D"/>
      </xs:restriction>
    </xs:simpleType>


    <xs:complexType name="Region">

        <xs:complexContent>
            <xs:extension base="Base">
                <xs:sequence>
                    <xs:any processContents="skip" minOccurs="0" maxOccurs="unbounded"/> <!-- Further elements will be specified!! -->
                </xs:sequence>

                <xs:attribute name="space" type="NmlId" use="optional"/>
            </xs:extension>
        </xs:complexContent>

    </xs:complexType>


    <xs:complexType name="Population">

        <xs:complexContent>
            <xs:extension base="Standalone">
                <xs:choice>
                    <xs:element name="layout" type="Layout" minOccurs="0"/>
                    <xs:element name="instances" type="Instances"/>
                </xs:choice>

                <xs:attribute name="cell" type="NmlId" use="optional"/>       <!-- Only one of these should be used!!! -->
                <xs:attribute name="network" type="NmlId" use="optional"/>    <!-- Only one of these should be used!!! -->
                <xs:attribute name="component" type="NmlId" use="optional"/>    <!-- Only one of these should be used!!! -->

                <xs:attribute name="size" type="xs:integer" use="optional"/>    <!-- Temp!!! -->

                <xs:attribute name="extracellularProperties" type="NmlId" use="optional"/>

            </xs:extension>
        </xs:complexContent>

    </xs:complexType>


    <xs:complexType name="Layout">

                <xs:choice>
                    <xs:element name="random" type="RandomLayout"/>
                    <xs:element name="grid" type="GridLayout"/>
                    <xs:element name="unstructured" type="UnstructuredLayout"/>
                </xs:choice>

                <xs:attribute name="space" type="NmlId"/>

    </xs:complexType>



    <xs:complexType name="UnstructuredLayout">
                <xs:attribute name="number" type="xs:nonNegativeInteger"/>
    </xs:complexType>


    <xs:complexType name="RandomLayout">
                <xs:attribute name="number" type="xs:nonNegativeInteger"/>
                <xs:attribute name="region" type="NmlId"/>
    </xs:complexType>


    <xs:complexType name="GridLayout">
                <xs:attribute name="xSize" type="xs:nonNegativeInteger"/>
                <xs:attribute name="ySize" type="xs:nonNegativeInteger" use="optional"/> <!-- only use if >= 2D grid-->
                <xs:attribute name="zSize" type="xs:nonNegativeInteger" use="optional"/> <!-- only use if 3D grid-->
    </xs:complexType>


    <xs:complexType name="Instances">
                <xs:sequence>
                    <xs:element name="instance" type="Instance" maxOccurs="unbounded"/>
                </xs:sequence>
                <xs:attribute name="size" type="xs:nonNegativeInteger"/>
    </xs:complexType>

    <xs:complexType name="Instance">
                <xs:sequence>
                    <xs:element name="location" type="Location"/>
                </xs:sequence>
                <xs:attribute name="id" type="xs:nonNegativeInteger"/>
                <xs:attribute name="i" type="xs:nonNegativeInteger"/>  <!-- for grid -->
                <xs:attribute name="j" type="xs:nonNegativeInteger"/>  <!-- for grid -->
                <xs:attribute name="k" type="xs:nonNegativeInteger"/>  <!-- for grid -->
    </xs:complexType>

    <xs:complexType name="Location">
                <xs:attribute name="x" type="xs:float"/>
                <xs:attribute name="y" type="xs:float"/>
                <xs:attribute name="z" type="xs:float"/>
    </xs:complexType>


    <xs:complexType name="CellSet">

        <xs:complexContent>
            <xs:extension base="Base">
                <xs:sequence>
                    <xs:any processContents="skip" minOccurs="0" maxOccurs="unbounded"/> <!-- Further elements will be specified!! -->
                </xs:sequence>

                <xs:attribute name="select" type="xs:string" use="required"/>
            </xs:extension>
        </xs:complexContent>

    </xs:complexType>


    <xs:complexType name="Projection">

        <xs:complexContent>
            <xs:extension base="Base">
                <xs:sequence>
                    <xs:any processContents="skip" minOccurs="0" maxOccurs="unbounded"/> <!-- Further elements will be specified!! -->
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>

    </xs:complexType>


<!--Will be updated in line with LEMS ComponentType definitions -->
    <xs:complexType name="SynapticConnection">
                <xs:attribute name="from" type="xs:string"/>
                <xs:attribute name="to" type="xs:string"/>
                <xs:attribute name="synapse" type="xs:string"/>
    </xs:complexType>

<!--Will be updated in line with LEMS ComponentType definitions -->
    <xs:complexType name="Connection">
                <xs:attribute name="from" type="xs:string"/>
                <xs:attribute name="to" type="xs:string"/>
    </xs:complexType>

<!--Will be updated in line with LEMS ComponentType definitions -->
    <xs:complexType name="ExplicitInput">
                <xs:attribute name="target" type="xs:string"/>
                <xs:attribute name="input" type="xs:string"/>
    </xs:complexType>



    <!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!--      Further Core elements                                    -->
    <!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <!--NOTE: Base and Standalone definitions moved to end of file, as some XML language binding
        generators, e.g. generateDS.py, require superclasses to be defined after the subclasses... -->

    <xs:complexType name="Base">
            
        <xs:annotation>
            <xs:documentation>Anything which can have a unique id (within its parent) i.e. most elements.</xs:documentation>
        </xs:annotation>

        <xs:attribute name="id" type="NmlId" use="required"/>

        <xs:attribute name="neuroLexId" type="NeuroLexId" use="optional"/>

    </xs:complexType>


    <xs:complexType name="Standalone">

        <xs:annotation>
            <xs:documentation>Elements which can stand alone and be referenced by id, e.g. cell, morphology.</xs:documentation>
        </xs:annotation>

        <xs:complexContent>
            <xs:extension base="Base">
                <xs:sequence>
                    <xs:element name="notes" type="Notes" minOccurs="0"/> <!-- More metadata needed -->
                    <xs:element name="annotation" type="Annotation" minOccurs="0"/> <!-- More metadata needed -->
                </xs:sequence>
                <xs:attribute name="metaid" type="MetaId" use="optional"/>

            </xs:extension>
        </xs:complexContent>

    </xs:complexType>

</xs:schema>



